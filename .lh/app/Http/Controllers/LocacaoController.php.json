{
    "sourceFile": "app/Http/Controllers/LocacaoController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1638475676020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1638475685944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n             $locacaoRepository->SelectAtributos($request->atributos);\n \n         }\n \n-        return response()->json($modeloRepository->getResultadoPaginado(5), 200);\n+        return response()->json($locacaoRepository->getResultadoPaginado(5), 200);\n \n     }\n \n     /**\n"
                }
            ],
            "date": 1638475676020,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Locacao;\nuse App\\Repositories\\LocacaoRepository;\nuse Illuminate\\Http\\Request;\n\nclass LocacaoController extends Controller\n{\n\n    public function __construct(Locacao $locacao) {\n        $this->locacao = $locacao;\n    }\n\n    public function listAll() {\n\n        $locacao = new Locacao();\n        $locacoes = $locacao->orderBy('data_inicio_periodo', 'asc')->get();\n\n        return ['locacoes' => $locacoes];\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n\n        $locacaoRepository = new LocacaoRepository($this->locacao);\n\n        if($request->has('atributos_cliente')) {\n\n            $atributos_cliente = 'cliente:id,'.$request->atributos_cliente;\n            $locacaoRepository->selAtribRegRelac($atributos_cliente);\n\n        } else {\n\n            $locacaoRepository->selAtribRegRelac('cliente');\n\n        }\n\n        if($request->has('atributos_carro')) {\n\n            $atributos_carro = 'carro:id,'.$request->atributos_carro;\n            $locacaoRepository->selAtribRegRelac($atributos_carro);\n\n        } else {\n\n            $locacaoRepository->selAtribRegRelac('carro');\n\n        }\n\n        if($request->has('filtro')) {\n\n            $locacaoRepository->filtro($request->filtro);\n\n        }\n\n        if($request->has('atributos')) {\n\n            $locacaoRepository->SelectAtributos($request->atributos);\n\n        }\n\n        return response()->json($modeloRepository->getResultadoPaginado(5), 200);\n\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        // Validando os dados a serem gravados\n\n        $request->validate($this->locacao->rules(), $this->locacao->feedback());\n\n        $dados = $request->all();\n\n        $locacao = $this->locacao->create($dados);\n\n        return response()->json($locacao, 201);\n\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  $id integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        $locacao = $this->locacao->with(['cliente', 'carro'])->find($id);\n\n        if ($locacao === null) {\n            return response()->json(['erro', 'Registro não encontrado'], 404);\n        } else {\n            return response()->json($locacao, 200);\n        }\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  $id integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        $locacao = $this->locacao->find($id);\n\n        if ($locacao === null) {\n\n            return response()->json(['erro' => 'Registro não encontrado, sem atualização'], 404);\n\n        } else {\n\n            if ($request->method() === 'PATCH') {\n\n                $dynamicRules = [];\n\n                foreach ($locacao->rules() as $key => $rule) {\n\n                    if (array_key_exists($key, $request->all())) {\n                        $dynamicRules[$key] = $rule;\n                    }\n\n                }\n\n                $request->validate($dynamicRules /* , $marca->feedback() */);\n\n            } else {\n\n                $request->validate($locacao->rules() /* , $locacao->feedback() */);\n\n            }\n\n            $locacao->fill($request->all());\n\n            if ($request->file('imagem')) {\n\n                Storage::disk('public')->delete($locacao->imagem);\n\n                $imagem = $request->file('imagem');\n\n                $imagem_urn = $imagem->store('imagens/modelos', 'public');\n\n                $locacao->imagem = $imagem_urn;\n\n            }\n\n            $locacao->save();\n\n            return response()->json($locacao, 200);\n        }\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param $id integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        $locacao = $this->locacao->find($id);\n\n        if ($locacao === null) {\n            return response()->json(['erro' => 'Registro não encontrado, nada foi removido'], 404);\n        } else {\n\n            $locacao->delete();\n\n            return response()->json(['msg' => 'A locação foi removida com sucesso!'], 200);\n        }\n    }\n}\n"
        }
    ]
}