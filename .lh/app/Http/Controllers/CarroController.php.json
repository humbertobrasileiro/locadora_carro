{
    "sourceFile": "app/Http/Controllers/CarroController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1638478946677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1638478946677,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Carro;\nuse App\\Repositories\\CarroRepository;\nuse Illuminate\\Http\\Request;\n\nclass CarroController extends Controller\n{\n\n    public function __construct(Carro $carro) {\n        $this->carro = $carro;\n    }\n\n    public function listAll() {\n\n        $carro = new Carro();\n        $carros = $carro->orderBy('modelo_id', 'asc')->with(['modelo'])->get();\n\n        return ['carros' => $carros];\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n\n        $carroRepository = new CarroRepository($this->carro);\n\n        if($request->has('atributos_modelo')) {\n\n            $atributos_modelo = 'modelo:id,'.$request->atributos_modelo;\n            $carroRepository->selAtribRegRelac($atributos_modelo);\n\n        } else {\n\n            $carroRepository->selAtribRegRelac('modelo');\n\n        }\n\n        if($request->has('atributos_locacoes')) {\n\n            $atributos_locacoes = 'locacoes:id,'.$request->atributos_locacoes;\n            $carroRepository->selAtribRegRelac($atributos_locacoes);\n\n        } else {\n\n            $carroRepository->selAtribRegRelac('locacoes');\n\n        }\n\n        if($request->has('filtro')) {\n\n            $carroRepository->filtro($request->filtro);\n\n        }\n\n        if($request->has('atributos')) {\n\n            $carroRepository->SelectAtributos($request->atributos);\n\n        }\n\n        return response()->json($carroRepository->getResultadoPaginado(5), 200);\n\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        // Validando os dados a serem gravados\n\n        $request->validate($this->carro->rules(), $this->carro->feedback());\n\n        $dados = $request->all();\n\n        $carro = $this->carro->create($dados);\n\n        return response()->json($carro, 201);\n\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  $id Integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        $carro = $this->carro->with('modelo')->find($id);\n\n        if ($carro === null) {\n            return response()->json(['erro', 'Registro não encontrado'], 404);\n        } else {\n            return response()->json($carro, 200);\n        }\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  $id Integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        $carro = $this->carro->find($id);\n\n        if ($carro === null) {\n\n            return response()->json(['erro' => 'Registro não encontrado, sem atualização'], 404);\n\n        } else {\n\n            if ($request->method() === 'PATCH') {\n\n                $dynamicRules = [];\n\n                foreach ($carro->rules() as $key => $rule) {\n\n                    if (array_key_exists($key, $request->all())) {\n                        $dynamicRules[$key] = $rule;\n                    }\n\n                }\n\n                $request->validate($dynamicRules, $carro->feedback());\n\n            } else {\n\n                $request->validate($carro->rules(), $carro->feedback());\n\n            }\n\n            $carro->fill($request->all());\n\n            $carro->save();\n\n            return response()->json($carro, 200);\n\n        }\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  $id Integer\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        $carro = $this->carro->find($id);\n\n        if ($carro === null) {\n            return response()->json(['erro' => 'Registro não encontrado, nada foi removido'], 404);\n        } else {\n\n            $carro->delete();\n            return response()->json(['msg' => 'O carro foi removido com sucesso!'], 200);\n\n        }\n    }\n}\n"
        }
    ]
}